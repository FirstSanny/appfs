#!/usr/bin/env python

## @package example
#  short description
#
#  long description

import numpy as np
import scipy, scipy.stats
import sys

## Doc for a method
#  short description
#  @param filename paramdescription
#  
#  long description
def parse_file(filename):
	# open file
	with open(filename, "r") as f:
	    # store [number of lines, number of positions in location1, number of positions in location2]
	    total = 0
	    # store values in loc1, loc2 respectively
	    loc = [[],[]]
	
		# loop over lines in file
	    for i, line in enumerate(f):
	    	# split the lines into the 3 values we are interested in
	        tmp = line.split("\n")[0].split("#")[0].split("; ")
	        # increase number of lines
	        total = total+1
	        # line broken if we get back less than three values
	        if len(tmp) < 3:
	        	# next line
	        	continue
	        try:
				# try converting strings into numbers
	            seq = int(tmp[0])
	            pos = int(tmp[1])
	            val = float(tmp[2])
	            # if these numbers are matching our format, then store them
	            if val>0 and (pos == 1 or pos == 2): 
	                loc[pos-1].append(val)
	                continue
	        # if something fails, then the line was broken
	        except ValueError:
	            continue
	return (total, loc)
	
def print_info(filename, n, total, mean):
	# output information
	print("File: " + str(filename) + " with " + str(total) + " lines")
	# for both locations calculate mean and output info
	for i in range(2):
	    print("Valid values Loc" + str(i+1) + ": " + str(n[i]) + " with GeoMean: " + str(mean[i]))

def calculate_means(loc):
	n = []
	# store the geometric mean of both locations
	mean = []
	for i in range(2):
	    n.append(len(loc[i]))
	    mean.append(scipy.stats.mstats.gmean(np.asarray(loc[i])))
	return (n, mean)

if __name__=="__main__":
	# read filename from commandlineargs
	filename = sys.argv[1]
	(total,loc) = parse_file(filename)
	(n,mean) = calculate_means(loc)
	print_info(filename, n, total, mean)

